<?php

namespace App\Policies;

use App\Models\User;
use App\Models\{{studlySingular}};
use Illuminate\Auth\Access\HandlesAuthorization;
use Illuminate\Database\Eloquent\SoftDeletes;

class {{studlySingular}}Policy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any {{lowercaseDisplayPlural}}.
     *
     * @param \App\Models\User|null $user
     * @return mixed
     */
    public function viewAny(User $user)
    {
        return $user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}');
    }

    /**
     * Determine whether the user can view the {{lowercaseDisplaySingular}}.
     *
     * @param \App\Models\User|null $user
     * @param \App\Models\{{studlySingular}} ${{lowercaseSingular}}
     * @return mixed
     */
    public function view(User $user, {{studlySingular}} ${{lowercaseSingular}})
    {
        return $user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}');
    }

    /**
     * Determine whether the user can create {{lowercaseDisplayPlural}}.
     *
     * @param \App\Models\User $user
     * @return mixed
     */
    public function create(User $user)
    {
        return $user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}');
    }

    /**
     * Determine whether the user can update the {{lowercaseDisplaySingular}}.
     *
     * @param \App\Models\User $user
     * @param \App\Models\{{studlySingular}} ${{lowercaseSingular}}
     * @return mixed
     */
    public function update(User $user, {{studlySingular}} ${{lowercaseSingular}})
    {
        return $user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}');
    }

    /**
     * Determine whether the user can delete the {{lowercaseDisplaySingular}}.
     *
     * @param \App\Models\User $user
     * @param \App\Models\{{studlySingular}} ${{lowercaseSingular}}
     * @return mixed
     */
    public function delete(User $user, {{studlySingular}} ${{lowercaseSingular}})
    {
        return $user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}');
    }

     /**
     * Determine whether the user can view trashed {{lowercasePlural}}.
     *
     * @param \App\Models\User $user
     * @return mixed
     */
    public function viewTrash(User $user)
    {
        return ($user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}')) && $this->hasSoftDeletes();
    }

    /**
     * Determine whether the user can restore the model.
     *
     * @param \App\Models\User $user
     * @param \App\Models\{{lowercaseSingular}} ${{studlySingular}}
     * @return mixed
     */
    public function restore(User $user, {{lowercaseSingular}} ${{studlySingular}})
    {
        return ($user->isAdmin() || $user->hasPermissionTo('manage.{{lowercasePlural}}')) && $this->trashed(${{studlySingular}});
    }

    /**
     * Determine whether the user can permanently delete the model.
     *
     * @param \App\Models\User $user
     * @param \App\Models\{{lowercaseSingular}} ${{studlySingular}}
     * @return mixed
     */
    public function forceDelete(User $user, {{lowercaseSingular}} ${{studlySingular}})
    {
        return ($user->isAdmin()  || $user->hasPermissionTo('manage.{{lowercasePlural}}')) && $this->trashed(${{studlySingular}});
    }

    /**
     * Determine wither the given {{studlySingular}} is trashed.
     *
     * @param ${{studlySingular}}
     * @return bool
     */
    public function trashed(${{studlySingular}})
    {
        return $this->hasSoftDeletes() && method_exists(${{studlySingular}}, 'trashed') && ${{studlySingular}}->trashed();
    }

    /**
     * Determine wither the model use soft deleting trait.
     *
     * @return bool
     */
    public function hasSoftDeletes()
    {
        return in_array(
            SoftDeletes::class,
            array_keys((new \ReflectionClass({{lowercaseSingular}}::class))->getTraits())
        );
    }
}
